// parser grammar
// ? means optional
// * means 0 or more
// + means 1 or more
PROGRAM = BLOCK
BLOCK = '{' ( LINE )* '}'
LINE = STATEMENT ';'
STATEMENT = 'set' <IDENT> 'to' EXPR
            | return STATEMENT
            | EXPR
            | BLOCK
            | 'if' STATEMENT 'then' STATEMENT
EXPR = TERM ( ( '+' | '-' ) TERM )*
TERM = FACTOR ( ( '*' | '/' ) FACTOR )*
STRING = "Value"
FACTOR = <NUMBER> | STRING | <IDENT> | '(' STATEMENT ')' | BLOCK | <BOOL>
         | 'call' STATEMENT ( 'with' '(' STATEMENT ( ',' STATEMENT )* ')' )?
         | 'func' 'takes' '(' <IDENT> ( ',' <IDENT> )* ')' )? EXPR