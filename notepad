// parser grammar
// ? means optional
// * means 0 or more
// + means 1 or more
PROGRAM = BLOCK
BLOCK = '{' ( LINE )* '}'
LINE = STATEMENT ';'
STATEMENT = 'make' 'memvar' <IDENT> '=' EXPR
            | return STATEMENT
            | EXPR
            | BLOCK
EXPR = TERM ( ( '+' | '-' ) TERM )*
TERM = FACTOR ( ( '*' | '/' ) FACTOR )*
STRING = "Value"
FACTOR = <NUMBER> | STRING | <IDENT> | '(' EXPR ')'
         | 'call' <FACTOR> ( 'with' '(' EXPR ( ',' EXPR )* ')' )?
         | 'func' 'takes' '(' <IDENT> ( ',' <IDENT> )* ')' )? EXPR